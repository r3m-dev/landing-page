---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../../FormattedDate.astro';
import { calculateReadingTimeFromMarkdown } from '../../../lib/reading';
import { slugifyTag as slugify } from '../../../lib/slug';

interface Props {
  post: CollectionEntry<'blog'>;
}
const { post } = Astro.props as Props;
// Estimate reading time from raw body (Markdown/MDX)
let readingTimeMin = 0;
try {
  // @ts-ignore - body may not exist until rendered; fallback to data.description
  const md = (post as any).body ?? '';
  readingTimeMin = calculateReadingTimeFromMarkdown(
    md || post.data.description || '',
  );
} catch {}
---

<article class="card-surface relative flex h-full flex-col gap-3 p-4">
  {
    post.data.heroImage && (
      <Image
        width={640}
        height={360}
        src={post.data.heroImage}
        alt={post.data.title}
      />
    )
  }
  <h3 class="text-xl font-semibold text-[color:var(--color-text-primary)]">
    {post.data.title}
  </h3>
  <p class="text-[color:var(--color-text-muted)]">{post.data.description}</p>
  <div class="flex flex-col gap-1 text-sm text-[color:var(--color-text-muted)]">
    <div class="flex items-center gap-1">
      <a
        href={`/blog/author/${slugify(post.data.author || 'Site Author')}/`}
        class="interactive-link hover:text-[color:var(--accent)]"
        >{post.data.author || 'Site Author'}</a
      >
    </div>
    <div class="flex items-center gap-1">
      <FormattedDate date={post.data.pubDate} />
    </div>
    {
      readingTimeMin > 0 && (
        <div class="flex items-center gap-1">
          <svg
            viewBox="0 0 24 24"
            width="14"
            height="14"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <circle cx="12" cy="12" r="9" />
            <path d="M12 7v5l3 3" />
          </svg>
          {readingTimeMin} min read
        </div>
      )
    }
  </div>
  {
    post.data.tags && post.data.tags.length > 0 && (
      <div class="flex flex-wrap gap-2">
        {post.data.tags.map((t) => (
          <a
            href={`/blog/tag/${t.replace(/\s+/g, '-').toLowerCase()}/`}
            class="sw-tag interactive-link"
          >
            {t}
          </a>
        ))}
      </div>
    )
  }
  <a
    href={`/blog/${post.id}/`}
    class="stretched-link"
    aria-label={post.data.title}></a>
</article>
