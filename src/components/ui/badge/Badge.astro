---
interface Props {
  variant?:
    | 'default'
    | 'accent'
    | 'info'
    | 'success'
    | 'warning'
    | 'error'
    | 'outline';
  size?: 'sm' | 'md';
  class?: string;
}

const {
  variant = 'default',
  size = 'md',
  class: className,
} = Astro.props as Props;

const base = 'inline-flex items-center justify-center rounded-full font-medium';
const paddings = size === 'sm' ? 'px-2.5 py-0.5 text-xs' : 'px-3 py-1 text-sm';

const colorByVariant: Record<string, string> = {
  default:
    'bg-[var(--accent)]/15 text-[var(--accent)] border border-[var(--accent)]/30',
  accent:
    'bg-[var(--accent)] text-[var(--accent-foreground)] border border-[var(--accent)]',
  info: 'bg-[var(--info)] text-[var(--info-foreground)] border border-[var(--info)]',
  success:
    'bg-[var(--success)] text-[var(--success-foreground)] border border-[var(--success)]',
  warning:
    'bg-[var(--warning)] text-[var(--warning-foreground)] border border-[var(--warning)]',
  error:
    'bg-[var(--error)] text-[var(--error-foreground)] border border-[var(--error)]',
  outline:
    'bg-transparent text-[color:var(--color-text-secondary)] border border-[var(--border)]',
};

const classes = [base, paddings, colorByVariant[variant], className]
  .filter(Boolean)
  .join(' ');
---

<span class={classes}>
  <slot />
</span>
